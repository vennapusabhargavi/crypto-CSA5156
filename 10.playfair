#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define GRID_SIZE 5

// Function to create the Playfair matrix from a key phrase
void createPlayfairMatrix(char keyPhrase[], char playfairMatrix[GRID_SIZE][GRID_SIZE]) {
    int i, j, k;
    int len = strlen(keyPhrase);
    char key[26] = {0}; // Array to track used letters
    char alphabet[] = "ABCDEFGHIKLMNOPQRSTUVWXYZ"; // Note: 'J' and 'I' are combined

    // Initialize the matrix with the key phrase
    k = 0;
    for (i = 0; i < len; i++) {
        if (keyPhrase[i] == 'J') keyPhrase[i] = 'I'; // Replace 'J' with 'I'
        keyPhrase[i] = toupper(keyPhrase[i]); // Convert to uppercase
        if (!key[keyPhrase[i] - 'A']) {
            playfairMatrix[k / GRID_SIZE][k % GRID_SIZE] = keyPhrase[i];
            key[keyPhrase[i] - 'A'] = 1;
            k++;
        }
    }

    // Fill the remaining matrix with the remaining letters of the alphabet
    for (i = 0; i < 26; i++) {
        if (alphabet[i] == 'J') continue; // Skip 'J' (combined with 'I')
        if (!key[alphabet[i] - 'A']) {
            playfairMatrix[k / GRID_SIZE][k % GRID_SIZE] = alphabet[i];
            key[alphabet[i] - 'A'] = 1;
            k++;
        }
    }
}

// Function to find the positions of two letters in the Playfair matrix
void findPositions(char playfairMatrix[GRID_SIZE][GRID_SIZE], char letter1, char letter2, int *row1, int *col1, int *row2, int *col2) {
    int i, j;

    // Find positions of both letters in the matrix
    for (i = 0; i < GRID_SIZE; i++) {
        for (j = 0; j < GRID_SIZE; j++) {
            if (playfairMatrix[i][j] == letter1) {
                *row1 = i;
                *col1 = j;
            }
            if (playfairMatrix[i][j] == letter2) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}

// Function to handle repeated letters and form pairs
void handleRepeatedLetters(char letter1, char letter2, char *newLetter1, char *newLetter2) {
    if (letter1 == letter2) {
        *newLetter1 = letter1;
        *newLetter2 = 'X'; // Insert an 'X' between repeated letters
    } else {
        *newLetter1 = letter1;
        *newLetter2 = letter2;
    }
}

// Function to encrypt a message using the Playfair cipher
void encryptMessage(char playfairMatrix[GRID_SIZE][GRID_SIZE], char *plaintext, char *ciphertext) {
    int i;
    int len = strlen(plaintext);
    char letter1, letter2;
    char newLetter1, newLetter2;
    int row1, col1, row2, col2;

    // Prepare the plaintext for encryption (handle repeated letters)
    i = 0;
    while (i < len) {
        letter1 = plaintext[i++];
        if (i < len) {
            letter2 = plaintext[i++];
        } else {
            letter2 = 'X'; // Append 'X' to the last letter if the plaintext length is odd
        }

        // Handle repeated letters
        handleRepeatedLetters(letter1, letter2, &newLetter1, &newLetter2);

        // Find positions in the matrix
        findPositions(playfairMatrix, newLetter1, newLetter2, &row1, &col1, &row2, &col2);

        // Apply encryption rules
        if (row1 == row2) {
            // Same row
            ciphertext[strlen(ciphertext)] = playfairMatrix[row1][(col1 + 1) % GRID_SIZE];
            ciphertext[strlen(ciphertext)] = playfairMatrix[row2][(col2 + 1) % GRID_SIZE];
        } else if (col1 == col2) {
            // Same column
            ciphertext[strlen(ciphertext)] = playfairMatrix[(row1 + 1) % GRID_SIZE][col1];
            ciphertext[strlen(ciphertext)] = playfairMatrix[(row2 + 1) % GRID_SIZE][col2];
        } else {
            // Form rectangle
            ciphertext[strlen(ciphertext)] = playfairMatrix[row1][col2];
            ciphertext[strlen(ciphertext)] = playfairMatrix[row2][col1];
        }
    }
    ciphertext[strlen(ciphertext)] = '\0';
}

int main() {
    char keyPhrase[] = "MFHIJKUNOPQZVWXYELARGDSTBC";
    char plaintext[] = "MUSTSEEYOUOVERCADOGANWESTCOMINGATONCE";
    char playfairMatrix[GRID_SIZE][GRID_SIZE];
    char ciphertext[200] = "";

    // Create the Playfair matrix
    createPlayfairMatrix(keyPhrase, playfairMatrix);

    // Encrypt the plaintext
    encryptMessage(playfairMatrix, plaintext, ciphertext);

    // Output the encrypted ciphertext
    printf("Encrypted message:\n%s\n", ciphertext);

    return 0;
}
