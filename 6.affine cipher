#include <stdio.h>

// Function to find modular inverse of a under modulo m
// This function assumes that m is prime
int modularInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Inverse does not exist
}

// Function to decrypt affine cipher given ciphertext, key (a, b)
void decryptAffineCipher(char ciphertext[], int a, int b) {
    int m = 26; // modulus for English alphabets

    // Find modular inverse of a
    int a_inverse = modularInverse(a, m);
    if (a_inverse == -1) {
        printf("Error: Modular inverse of a does not exist.\n");
        return;
    }

    // Decrypt each character
    int i = 0;
    while (ciphertext[i] != '\0') {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            // Convert character to numeric value
            int C = ciphertext[i] - 'A';
            // Decrypt using affine decryption formula
            int P = (a_inverse * (C - b + m)) % m;
            // Convert numeric value to plaintext character
            char plaintextChar = 'A' + P;
            printf("%c", plaintextChar);
        } else {
            // Leave non-alphabet characters unchanged
            printf("%c", ciphertext[i]);
        }
        i++;
    }
    printf("\n");
}

int main() {
    // Example ciphertext and known key (a, b)
    char ciphertext[] = "BUTWBOBSL";
    int a = 3; // Example value of a (assuming it's known)
    int b = 6; // Example value of b (assuming it's known)

    // Decrypt the ciphertext
    decryptAffineCipher(ciphertext, a, b);

    return 0;
}
